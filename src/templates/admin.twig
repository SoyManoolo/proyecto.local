{% extends "layout.twig" %}

{% block title %}Admin Panel - Blue Lock{% endblock %}

{% block stylesheets %}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
<style>
    .admin-sidebar {
        background-color: #1a1a35;
        min-height: 100vh;
    }
    .admin-content {
        background-color: #121225;
    }
    .nav-link {
        color: #adb5bd;
        border-radius: 5px;
        margin-bottom: 5px;
    }
    .nav-link:hover, .nav-link.active {
        background-color: #0000F5;
        color: white;
    }
    .card {
        background-color: #1a1a35;
        border: none;
        border-radius: 10px;
    }
    .card-header {
        background-color: #0000F5;
        color: white;
        border-top-left-radius: 10px !important;
        border-top-right-radius: 10px !important;
    }
    .table {
        color: white;
    }
    .table thead th {
        border-bottom: 2px solid #0000F5;
    }
    .btn-primary {
        background-color: #0000F5;
        border-color: #0000F5;
    }
    .btn-primary:hover {
        background-color: #0000c0;
        border-color: #0000c0;
    }
    .btn-outline-primary {
        color: #0000F5;
        border-color: #0000F5;
    }
    .btn-outline-primary:hover {
        background-color: #0000F5;
        border-color: #0000F5;
    }
    .form-control, .form-select {
        background-color: #121225;
        border-color: #2a2a45;
        color: white;
    }
    .form-control:focus, .form-select:focus {
        background-color: #121225;
        border-color: #0000F5;
        color: white;
        box-shadow: 0 0 0 0.25rem rgba(0, 0, 245, 0.25);
    }
    .modal-content {
        background-color: #1a1a35;
        color: white;
    }
    .modal-header {
        border-bottom: 1px solid #2a2a45;
    }
    .modal-footer {
        border-top: 1px solid #2a2a45;
    }
    .badge-stat {
        font-size: 0.9rem;
        padding: 0.4rem 0.6rem;
        border-radius: 5px;
        margin-right: 5px;
        background-color: #0000F5;
        color: white;
    }
    .stat-value {
        font-weight: bold;
    }
    .player-row:hover {
        background-color: rgba(0, 0, 245, 0.1);
        cursor: pointer;
    }
    .loading-spinner {
        width: 3rem;
        height: 3rem;
    }
</style>
{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3 col-lg-2 d-md-block admin-sidebar p-4">
            <div class="d-flex align-items-center mb-4">
                <h4 class="text-white mb-0">{{ translations.admin_panel }}</h4>
            </div>
            <div class="mb-4">
                <div class="text-white mb-2">
                    <span id="adminName">{{translations.loading}}</span>
                </div>
                <small class="text-muted">{{translations.admin}}</small>
            </div>
            <hr class="bg-secondary">
            <ul class="nav flex-column">
                <li class="nav-item">
                    <a class="nav-link active" href="#" id="playersNav">
                        <i class="bi bi-people-fill me-2"></i>
                        {{translations.players}}
                    </a>
                </li>
                <li class="nav-item mt-3">
                    <a class="nav-link text-danger" href="/home">
                        <i class="bi bi-box-arrow-left me-2"></i>
                        {{translations.exit_admin}}
                    </a>
                </li>
            </ul>
        </div>

        <!-- Main Content -->
        <div class="col-md-9 col-lg-10 admin-content p-4">
            <!-- Players Section -->
            <div id="playersSection">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2 class="text-white">{{translations.players_management}}</h2>
                    <button class="btn btn-primary" id="addPlayerBtn">
                        <i class="bi bi-plus-lg me-2"></i>{{translations.add_player}}
                    </button>
                </div>

                <div class="card mb-4">
                    <div class="card-header py-3">
                        <div class="row align-items-center">
                            <div class="col">
                                <h5 class="mb-0">{{translations.players_list}}</h5>
                            </div>
                            <div class="col-auto">
                                <input type="text" class="form-control" id="playerSearch" placeholder="{{translations.search_player}}">
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="loadingPlayers" class="text-center py-5">
                            <div class="spinner-border text-primary loading-spinner" role="status">
                                <span class="visually-hidden">{{translations.loading}}</span>
                            </div>
                            <p class="mt-3">{{translations.loading_players}}</p>
                        </div>
                        <div id="playersTableContainer" class="table-responsive" style="display: none;">
                            <table class="table table-hover" id="playersTable">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>{{translations.name}}</th>
                                        <th>{{translations.surname}}</th>
                                        <th>{{translations.birthday}}</th>
                                        <th>{{translations.height}}</th>
                                        <th>{{translations.stats}}</th>
                                        <th>{{translations.player_actions}}</th>
                                    </tr>
                                </thead>
                                <tbody id="playersTableBody">
                                    <!-- Players will be loaded here -->
                                </tbody>
                            </table>
                        </div>
                        <div id="noPlayersMessage" class="text-center py-5" style="display: none;">
                            <i class="bi bi-exclamation-circle text-warning" style="font-size: 3rem;"></i>
                            <p class="mt-3">{{translations.no_players_found}}</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Player Modal -->
<div class="modal fade" id="playerModal" tabindex="-1" aria-labelledby="playerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="playerModalLabel">{{translations.add_player}}</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="playerForm">
                    <input type="hidden" id="playerId">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="playerName" class="form-label">{{translations.name}}</label>
                            <input type="text" class="form-control" id="playerName" required>
                        </div>
                        <div class="col-md-6">
                            <label for="playerSurname" class="form-label">{{translations.surname}}</label>
                            <input type="text" class="form-control" id="playerSurname" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="playerBirthday" class="form-label">{{translations.birthday}}</label>
                            <input type="date" class="form-control" id="playerBirthday" required>
                        </div>
                        <div class="col-md-6">
                            <label for="playerHeight" class="form-label">{{translations.height}}</label>
                            <input type="number" step="0.01" class="form-control" id="playerHeight" required>
                        </div>
                    </div>
                    <h5 class="mt-4 mb-3">{{translations.stats}}</h5>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="statDef" class="form-label">{{translations.defense}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statDef" required>
                        </div>
                        <div class="col-md-4">
                            <label for="statSpd" class="form-label">{{translations.speed}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statSpd" required>
                        </div>
                        <div class="col-md-4">
                            <label for="statOff" class="form-label">{{translations.offense}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statOff" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="statPass" class="form-label">{{translations.passing}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statPass" required>
                        </div>
                        <div class="col-md-4">
                            <label for="statDrb" class="form-label">{{translations.dribbling}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statDrb" required>
                        </div>
                        <div class="col-md-4">
                            <label for="statShoot" class="form-label">{{translations.shooting}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statShoot" required>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{translations.cancel}}</button>
                <button type="button" class="btn btn-primary" id="savePlayerBtn">{{translations.save_player}}</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">{{translations.confirm_deletion}}</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>{{translations.delete_confirmation}}</p>
                <p class="mb-0"><strong>{{translations.player}}: </strong><span id="deletePlayerName"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{translations.cancel}}</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">{{translations.delete}}</button>
            </div>
        </div>
    </div>
</div>

<!-- Alert Toast -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="alertToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto" id="toastTitle">{{translations.notification}}</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage">
            <!-- Message will be set dynamically -->
        </div>
    </div>
</div>
{% endblock %}
{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        /**
         * Script para el panel de administración de Blue Lock
         * Este script maneja la gestión de jugadores, incluyendo:
         * - Verificación de autenticación de administrador
         * - Carga y visualización de jugadores
         * - Filtrado de jugadores
         * - Adición, edición y eliminación de jugadores
         */

        // Verificar si el usuario está autenticado y es administrador
        const token = localStorage.getItem('token');
        const user = JSON.parse(localStorage.getItem('user') || '{}');

        if (!token) {
            // Redirigir al login si no hay token
            window.location.href = '/login';
            return;
        }

        // Establecer el nombre del administrador en la interfaz
        document.getElementById('adminName').textContent = `${user.name} ${user.surname}`;

        // Inicializar variables globales
        let playersData = []; // Almacena los datos de todos los jugadores
        const playerModal = new bootstrap.Modal(document.getElementById('playerModal'));
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
        const alertToast = new bootstrap.Toast(document.getElementById('alertToast'));

        // Cargar datos de jugadores al iniciar
        loadPlayers();

        // Configurar listeners de eventos para los botones principales
        document.getElementById('addPlayerBtn').addEventListener('click', () => {
            resetPlayerForm();
            document.getElementById('playerModalLabel').textContent = 'Add New Player';
            playerModal.show();
        });

        document.getElementById('savePlayerBtn').addEventListener('click', savePlayer);
        document.getElementById('confirmDeleteBtn').addEventListener('click', deletePlayer);
        document.getElementById('playerSearch').addEventListener('input', filterPlayers);

        /**
         * Carga los jugadores desde la API
         * Muestra indicadores de carga y maneja errores
         */
        function loadPlayers() {
            // Mostrar indicador de carga
            document.getElementById('loadingPlayers').style.display = 'block';
            document.getElementById('playersTableContainer').style.display = 'none';
            document.getElementById('noPlayersMessage').style.display = 'none';

            // Realizar petición a la API
            fetch('/api/admin/players', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    // Guardar datos y renderizar tabla
                    playersData = data.data;
                    renderPlayersTable(playersData);
                } else {
                    // Mostrar mensaje de error
                    showToast('Error', data.message || 'Failed to load players', 'error');
                    document.getElementById('loadingPlayers').style.display = 'none';
                    document.getElementById('noPlayersMessage').style.display = 'block';
                }
            })
            .catch(error => {
                // Manejar errores de conexión
                console.error('Error loading players:', error);
                showToast('Error', 'Failed to connect to the server', 'error');
                document.getElementById('loadingPlayers').style.display = 'none';
                document.getElementById('noPlayersMessage').style.display = 'block';
            });
        }

        /**
         * Renderiza la tabla de jugadores con los datos proporcionados
         * @param {Array} players - Array de objetos con datos de jugadores
         */
        function renderPlayersTable(players) {
            const tableBody = document.getElementById('playersTableBody');
            tableBody.innerHTML = '';

            // Mostrar mensaje si no hay jugadores
            if (players.length === 0) {
                document.getElementById('loadingPlayers').style.display = 'none';
                document.getElementById('playersTableContainer').style.display = 'none';
                document.getElementById('noPlayersMessage').style.display = 'block';
                return;
            }

            // Crear filas para cada jugador
            players.forEach(player => {
                const row = document.createElement('tr');
                row.className = 'player-row';
                row.dataset.playerId = player.player_id;

                // Formatear fecha de nacimiento
                const birthDate = new Date(player.birthday);
                const formattedDate = birthDate.toLocaleDateString();

                // Crear badges para estadísticas
                const statsHtml = `
                    <span class="badge-stat">DEF: <span class="stat-value">${player.def}</span></span>
                    <span class="badge-stat">SPD: <span class="stat-value">${player.spd}</span></span>
                    <span class="badge-stat">OFF: <span class="stat-value">${player.off}</span></span>
                `;

                // Crear contenido HTML de la fila
                row.innerHTML = `
                    <td>${player.player_id}</td>
                    <td>${player.name}</td>
                    <td>${player.surname}</td>
                    <td>${formattedDate}</td>
                    <td>${player.height}</td>
                    <td>${statsHtml}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary edit-btn" data-player-id="${player.player_id}">
                            <i class="bi bi-pencil-fill"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger ms-1 delete-btn" data-player-id="${player.player_id}">
                            <i class="bi bi-trash-fill"></i>
                        </button>
                    </td>
                `;

                tableBody.appendChild(row);
            });

            // Añadir event listeners a los botones de edición
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation(); // Evitar propagación del evento
                    const playerId = btn.dataset.playerId;
                    editPlayer(playerId);
                });
            });

            // Añadir event listeners a los botones de eliminación
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation(); // Evitar propagación del evento
                    const playerId = btn.dataset.playerId;
                    confirmDeletePlayer(playerId);
                });
            });

            // Añadir event listeners a las filas para edición rápida
            document.querySelectorAll('.player-row').forEach(row => {
                row.addEventListener('click', () => {
                    const playerId = row.dataset.playerId;
                    editPlayer(playerId);
                });
            });

            // Actualizar visibilidad de elementos
            document.getElementById('loadingPlayers').style.display = 'none';
            document.getElementById('playersTableContainer').style.display = 'block';
        }

        /**
         * Filtra jugadores según el término de búsqueda
         * Actualiza la tabla con los resultados filtrados
         */
        function filterPlayers() {
            const searchTerm = document.getElementById('playerSearch').value.toLowerCase();

            // Si no hay término de búsqueda, mostrar todos los jugadores
            if (!searchTerm) {
                renderPlayersTable(playersData);
                return;
            }

            // Filtrar jugadores por nombre o apellido
            const filteredPlayers = playersData.filter(player => {
                return (
                    player.name.toLowerCase().includes(searchTerm) ||
                    player.surname.toLowerCase().includes(searchTerm)
                );
            });

            // Actualizar tabla con resultados filtrados
            renderPlayersTable(filteredPlayers);
        }

        /**
         * Prepara el formulario para editar un jugador existente
         * @param {string} playerId - ID del jugador a editar
         */
        function editPlayer(playerId) {
            const player = playersData.find(p => p.player_id == playerId);

            if (!player) {
                showToast('Error', 'Player not found', 'error');
                return;
            }

            // Configurar el formulario con los datos del jugador
            document.getElementById('playerModalLabel').textContent = 'Edit Player';
            document.getElementById('playerId').value = player.player_id;
            document.getElementById('playerName').value = player.name;
            document.getElementById('playerSurname').value = player.surname;
            document.getElementById('playerBirthday').value = player.birthday.split(' ')[0]; // Formatear fecha para input
            document.getElementById('playerHeight').value = player.height;
            document.getElementById('statDef').value = player.def;
            document.getElementById('statSpd').value = player.spd;
            document.getElementById('statOff').value = player.off;
            document.getElementById('statPass').value = player.pass;
            document.getElementById('statDrb').value = player.drb;
            document.getElementById('statShoot').value = player.shoot;

            // Mostrar el modal
            playerModal.show();
        }

        /**
         * Reinicia el formulario de jugador a valores por defecto
         */
        function resetPlayerForm() {
            document.getElementById('playerForm').reset();
            document.getElementById('playerId').value = '';
        }

        /**
         * Guarda un jugador (nuevo o existente) en la base de datos
         */
        function savePlayer() {
            const playerId = document.getElementById('playerId').value;
            const isNewPlayer = !playerId;

            // Recopilar datos del formulario
            const playerData = {
                name: document.getElementById('playerName').value,
                surname: document.getElementById('playerSurname').value,
                birthday: document.getElementById('playerBirthday').value,
                height: document.getElementById('playerHeight').value,
                def: parseInt(document.getElementById('statDef').value),
                spd: parseInt(document.getElementById('statSpd').value),
                off: parseInt(document.getElementById('statOff').value),
                pass: parseInt(document.getElementById('statPass').value),
                drb: parseInt(document.getElementById('statDrb').value),
                shoot: parseInt(document.getElementById('statShoot').value)
            };

            // Validar datos del formulario
            if (!playerData.name || !playerData.surname || !playerData.birthday) {
                showToast('Error', 'Please fill all required fields', 'error');
                return;
            }

            // Determinar URL y método según si es nuevo o existente
            const url = isNewPlayer ? '/api/admin/players' : `/api/admin/players/${playerId}`;
            const method = isNewPlayer ? 'POST' : 'PUT';

            // Enviar datos a la API
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(playerData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    // Mostrar mensaje de éxito
                    showToast('Success', isNewPlayer ? 'Player added successfully' : 'Player updated successfully');
                    playerModal.hide();
                    loadPlayers(); // Recargar jugadores
                } else {
                    // Mostrar mensaje de error
                    showToast('Error', data.message || 'Failed to save player', 'error');
                }
            })
            .catch(error => {
                console.error('Error saving player:', error);
                showToast('Error', 'Failed to connect to the server', 'error');
            });
        }

        /**
         * Muestra el modal de confirmación para eliminar un jugador
         * @param {string} playerId - ID del jugador a eliminar
         */
        function confirmDeletePlayer(playerId) {
            const player = playersData.find(p => p.player_id == playerId);

            if (!player) {
                showToast('Error', 'Player not found', 'error');
                return;
            }

            // Configurar el modal de confirmación
            document.getElementById('deletePlayerName').textContent = `${player.name} ${player.surname}`;
            document.getElementById('deletePlayerId').value = player.player_id;

            // Mostrar el modal
            deleteModal.show();
        }

        /**
         * Elimina un jugador de la base de datos
         */
        function deletePlayer() {
            const playerId = document.getElementById('deletePlayerId').value;

            if (!playerId) {
                showToast('Error', 'Player ID not found', 'error');
                return;
            }

            // Enviar solicitud de eliminación a la API
            fetch(`/api/admin/players/${playerId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    // Mostrar mensaje de éxito
                    showToast('Success', 'Player deleted successfully');
                    deleteModal.hide();
                    loadPlayers(); // Recargar jugadores
                } else {
                    // Mostrar mensaje de error
                    showToast('Error', data.message || 'Failed to delete player', 'error');
                }
            })
            .catch(error => {
                console.error('Error deleting player:', error);
                showToast('Error', 'Failed to connect to the server', 'error');
            });
        }

        /**
         * Muestra una notificación toast con un mensaje
         * @param {string} title - Título de la notificación
         * @param {string} message - Mensaje de la notificación
         * @param {string} type - Tipo de notificación (info, success, error)
         */
        function showToast(title, message, type = 'info') {
            const toastEl = document.getElementById('alertToast');
            const titleEl = document.getElementById('toastTitle');
            const messageEl = document.getElementById('toastMessage');

            // Configurar el contenido del toast
            titleEl.textContent = title;
            messageEl.textContent = message;

            // Establecer clase según el tipo
            toastEl.className = 'toast';
            if (type === 'error') {
                toastEl.classList.add('bg-danger', 'text-white');
            } else if (type === 'success') {
                toastEl.classList.add('bg-success', 'text-white');
            } else if (type === 'error') {
                toastEl.classList.add('bg-danger', 'text-white');
            } else {
                toastEl.classList.add('bg-info', 'text-white');
            }

            // Mostrar el toast
            alertToast.show();
        }
    });
</script>
{% endblock %}
