{% extends "layout.twig" %}

{% block title %}Admin Panel - Blue Lock{% endblock %}

{% block stylesheets %}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
<style>
    /* Variables para colores y reutilización */
    :root {
        --bg-primary: #1a1a35;
        --bg-secondary: #121225;
        --accent-color: #0000F5;
        --accent-hover: #0000c0;
        --border-color: #2a2a45;
        --text-muted: rgba(255, 255, 255, 0.6);
    }

    /* Estilos básicos */
    .admin-wrapper {
        display: flex;
        min-height: 100vh;
        position: relative;
        overflow: hidden;
    }

    /* Sidebar */
    .admin-sidebar {
        background-color: var(--bg-primary);
        min-height: 100vh;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        width: 250px;
        padding: 1rem;
        transition: transform 0.3s ease;
    }

    .admin-sidebar.collapsed { transform: translateX(-100%); }
    .admin-sidebar.expanded { transform: translateX(0); }

    /* Botón toggle */
    .sidebar-toggle {
        color: white;
        font-size: 1.5rem;
        position: fixed;
        top: 1rem;
        left: 1rem;
        height: 2.5rem;
        width: 2.5rem;
        border: none;
        border-radius: 50%;
        background-color: var(--bg-primary);
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        display: none;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 1001;
    }

    /* Enlaces de navegación */
    .nav-link {
        color: #adb5bd;
        border-radius: 5px;
        margin-bottom: 5px;
        display: flex;
        align-items: center;
        padding: 0.5rem 1rem;
        transition: all 0.3s ease;
    }

    .nav-link:hover, .nav-link.active {
        background-color: var(--accent-color);
        color: white;
    }

    .nav-link i { margin-right: 0.5rem; }

    /* Contenido principal */
    .admin-content {
        background-color: var(--bg-secondary);
        padding: 2rem;
        min-height: 100vh;
        flex: 1;
        transition: transform 0.3s ease;
    }

    /* Overlay */
    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 999;
        display: none;
    }

    .overlay.active { display: block; }

    /* Componentes UI */
    .card {
        background-color: var(--bg-primary);
        border: none;
        border-radius: 10px;
    }

    .card-header {
        background-color: var(--accent-color);
        color: white;
        border-top-left-radius: 10px !important;
        border-top-right-radius: 10px !important;
    }

    .table { color: white; }
    .table thead th { border-bottom: 2px solid var(--accent-color); }

    .btn-primary {
        background-color: var(--accent-color);
        border-color: var(--accent-color);
    }

    .btn-primary:hover {
        background-color: var(--accent-hover);
        border-color: var(--accent-hover);
    }

    .btn-outline-primary {
        color: var(--accent-color);
        border-color: var(--accent-color);
    }

    .btn-outline-primary:hover {
        background-color: var(--accent-color);
        border-color: var(--accent-color);
    }

    .form-control, .form-select {
        background-color: var(--bg-secondary);
        border-color: var(--border-color);
        color: white;
    }

    .form-control:focus, .form-select:focus {
        background-color: var(--bg-secondary);
        border-color: var(--accent-color);
        color: white;
        box-shadow: 0 0 0 0.25rem rgba(0, 0, 245, 0.25);
    }

    .modal-content {
        background-color: var(--bg-primary);
        color: white;
    }

    .modal-header { border-bottom: 1px solid var(--border-color); }
    .modal-footer { border-top: 1px solid var(--border-color); }

    .badge-stat {
        font-size: 0.9rem;
        padding: 0.4rem 0.6rem;
        border-radius: 5px;
        margin-right: 5px;
        background-color: var(--accent-color);
        color: white;
    }

    .stat-value { font-weight: bold; }

    .player-row:hover {
        background-color: rgba(0, 0, 245, 0.1);
        cursor: pointer;
    }

    .loading-spinner {
        width: 3rem;
        height: 3rem;
    }

    .text-muted { color: var(--text-muted) !important; }

    /* Media queries */
    @media (min-width: 769px) {
        .admin-content { margin-left: 250px; }
        .admin-sidebar { transform: translateX(0); }
    }

    @media (max-width: 768px) {
        .sidebar-toggle { display: flex; }
        .admin-sidebar { transform: translateX(-100%); }
        .admin-content {
            transform: translateX(0);
            margin-left: 0;
            width: 100%;
        }
        .admin-sidebar.expanded + .admin-content { transform: translateX(250px); }
        .admin-sidebar.expanded + .admin-content + .overlay { display: block; }
    }
</style>
{% endblock %}

{% block content %}
<div class="admin-wrapper">
    <button class="sidebar-toggle" id="sidebarToggle"><i class="bi bi-list"></i></button>

    <div class="admin-sidebar" id="sidebar">
        <div class="sidebar-header">
            <h4 class="text-white mb-0">{{ translations.admin_panel }}</h4>
        </div>
        <div class="mb-4">
            <div class="text-white mb-2">
                <span id="adminName">{{translations.loading}}</span>
            </div>
            <small class="text-muted">{{translations.admin}}</small>
        </div>
        <hr class="bg-secondary">
        <ul class="nav flex-column">
            <li class="nav-item">
                <a class="nav-link active" href="#" id="playersNav">
                    <i class="bi bi-people-fill me-2"></i>
                    <span>{{translations.players}}</span>
                </a>
            </li>
            <li class="nav-item mt-3">
                <a class="nav-link text-danger" href="/home">
                    <i class="bi bi-box-arrow-left me-2"></i>
                    <span>{{translations.exit_admin}}</span>
                </a>
            </li>
        </ul>
    </div>

    <div class="admin-content" id="adminContent">
        <div id="playersSection">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="text-white">{{translations.players_management}}</h2>
                <button class="btn btn-primary" id="addPlayerBtn">
                    <i class="bi bi-plus-lg me-2"></i>{{translations.add_player}}
                </button>
            </div>

            <div class="card mb-4">
                <div class="card-header py-3">
                    <div class="row align-items-center">
                        <div class="col">
                            <h5 class="mb-0">{{translations.players_list}}</h5>
                        </div>
                        <div class="col-auto">
                            <input type="text" class="form-control" id="playerSearch" placeholder="{{translations.search_player}}">
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div id="loadingPlayers" class="text-center py-5">
                        <div class="spinner-border text-primary loading-spinner" role="status">
                            <span class="visually-hidden">{{translations.loading}}</span>
                        </div>
                        <p class="mt-3">{{translations.loading_players}}</p>
                    </div>
                    <div id="playersTableContainer" class="table-responsive" style="display: none;">
                        <table class="table table-hover" id="playersTable">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>{{translations.name}}</th>
                                    <th>{{translations.surname}}</th>
                                    <th>{{translations.birthday}}</th>
                                    <th>{{translations.height}}</th>
                                    <th>{{translations.stats}}</th>
                                    <th>{{translations.player_actions}}</th>
                                </tr>
                            </thead>
                            <tbody id="playersTableBody"></tbody>
                        </table>
                    </div>
                    <div id="noPlayersMessage" class="text-center py-5" style="display: none;">
                        <i class="bi bi-exclamation-circle text-warning" style="font-size: 3rem;"></i>
                        <p class="mt-3">{{translations.no_players_found}}</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="overlay" id="overlay"></div>
</div>

<!-- Modal para añadir/editar jugadores -->
<div class="modal fade" id="playerModal" tabindex="-1" aria-labelledby="playerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="playerModalLabel">{{translations.add_player}}</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="playerForm">
                    <input type="hidden" id="playerId">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="playerName" class="form-label">{{translations.name}}</label>
                            <input type="text" class="form-control" id="playerName" required>
                        </div>
                        <div class="col-md-6">
                            <label for="playerSurname" class="form-label">{{translations.surname}}</label>
                            <input type="text" class="form-control" id="playerSurname" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="playerBirthday" class="form-label">{{translations.birthday}}</label>
                            <input type="text" class="form-control" id="playerBirthday" required>
                        </div>
                        <div class="col-md-6">
                            <label for="playerHeight" class="form-label">{{translations.height}}</label>
                            <input type="text" step="0.01" class="form-control" id="playerHeight" required>
                        </div>
                    </div>
                    <h5 class="mt-4 mb-3">{{translations.stats}}</h5>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="statDef" class="form-label">{{translations.defense}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statDef" required>
                        </div>
                        <div class="col-md-4">
                            <label for="statSpd" class="form-label">{{translations.speed}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statSpd" required>
                        </div>
                        <div class="col-md-4">
                            <label for="statOff" class="form-label">{{translations.offense}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statOff" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="statPass" class="form-label">{{translations.passing}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statPass" required>
                        </div>
                        <div class="col-md-4">
                            <label for="statDrb" class="form-label">{{translations.dribbling}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statDrb" required>
                        </div>
                        <div class="col-md-4">
                            <label for="statShoot" class="form-label">{{translations.shooting}}</label>
                            <input type="number" min="0" max="100" class="form-control" id="statShoot" required>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{translations.cancel}}</button>
                <button type="button" class="btn btn-primary" id="savePlayerBtn">{{translations.save_player}}</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para eliminar jugadores -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">{{translations.confirm_deletion}}</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>{{translations.delete_confirmation}}</p>
                <p class="mb-0"><strong>{{translations.player}}: </strong><span id="deletePlayerName"></span></p>
                <input type="hidden" id="deletePlayerId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{translations.cancel}}</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">{{translations.delete}}</button>
            </div>
        </div>
    </div>
</div>

<!-- Pop Up -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="alertToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto" id="toastTitle">{{translations.notification}}</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage"></div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Inicialización
        const token = localStorage.getItem('token');
        const user = JSON.parse(localStorage.getItem('user') || '{}');

        // Redireccionar si no hay token
        if (!token) {
            window.location.href = '/login';
            return;
        }

        // Elementos DOM
        const sidebar = document.getElementById('sidebar');
        const sidebarToggle = document.getElementById('sidebarToggle');
        const overlay = document.getElementById('overlay');
        const adminContent = document.getElementById('adminContent');
        const playerForm = document.getElementById('playerForm');

        // Modales y toast
        const playerModal = new bootstrap.Modal(document.getElementById('playerModal'));
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
        const alertToast = new bootstrap.Toast(document.getElementById('alertToast'));

        // Estado
        let playersData = [];

        // Inicializar UI
        document.getElementById('adminName').textContent = `${user.name} ${user.surname}`;

        // Cargar datos
        loadPlayers();

        // Event listeners
        document.getElementById('addPlayerBtn').addEventListener('click', () => {
            resetPlayerForm();
            document.getElementById('playerModalLabel').textContent = '{{translations.add_player}}';
            playerModal.show();
        });

        document.getElementById('savePlayerBtn').addEventListener('click', savePlayer);
        document.getElementById('confirmDeleteBtn').addEventListener('click', deletePlayer);
        document.getElementById('playerSearch').addEventListener('input', filterPlayers);

        // Sidebar toggle
        sidebarToggle.addEventListener('click', toggleSidebar);
        overlay.addEventListener('click', closeSidebar);

        // Responsive
        adjustSidebar();
        window.addEventListener('resize', adjustSidebar);

        // Funciones
        function toggleSidebar() {
            sidebar.classList.toggle('collapsed');
            sidebar.classList.toggle('expanded');
            overlay.classList.toggle('active');

            if (sidebar.classList.contains('expanded')) {
                sidebarToggle.style.display = 'none';
                adminContent.style.transform = 'translateX(250px)';
            } else {
                sidebarToggle.style.display = 'flex';
                adminContent.style.transform = 'translateX(0)';
            }
        }

        // Cerrar sidebar
        function closeSidebar() {
            sidebar.classList.remove('expanded');
            sidebar.classList.add('collapsed');
            overlay.classList.remove('active');
            adminContent.style.transform = 'translateX(0)';
            sidebarToggle.style.display = 'flex';
        }

        // Ajustar sidebar
        function adjustSidebar() {
            if (window.innerWidth <= 768) {
                sidebar.classList.remove('expanded');
                sidebar.classList.add('collapsed');
                overlay.classList.remove('active');
                adminContent.style.transform = 'translateX(0)';
                sidebarToggle.style.display = 'flex';
            } else {
                sidebar.classList.remove('collapsed');
                sidebar.classList.add('expanded');
                overlay.classList.remove('active');
                adminContent.style.transform = 'translateX(0)';
                sidebarToggle.style.display = 'none';
            }
        }

        // Funciones de la tabla de jugadores
        function loadPlayers() {
            showLoader(true);

            fetch('/api/admin/players', {
                headers: { 'Authorization': `Bearer ${token}` }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    playersData = data.data;
                    renderPlayersTable(playersData);
                } else {
                    showToast('Error', data.message || 'Failed to load players', 'error');
                    showNoPlayersMessage();
                }
            })
            .catch(error => {
                console.error('Error loading players:', error);
                showToast('Error', 'Failed to connect to the server', 'error');
                showNoPlayersMessage();
            });
        }

        // Mostrar loader
        function showLoader(show) {
            document.getElementById('loadingPlayers').style.display = show ? 'block' : 'none';
            document.getElementById('playersTableContainer').style.display = show ? 'none' : (playersData.length ? 'block' : 'none');
            document.getElementById('noPlayersMessage').style.display = (!show && !playersData.length) ? 'block' : 'none';
        }

        // Mostrar mensaje de no jugadores
        function showNoPlayersMessage() {
            document.getElementById('loadingPlayers').style.display = 'none';
            document.getElementById('playersTableContainer').style.display = 'none';
            document.getElementById('noPlayersMessage').style.display = 'block';
        }

        // Renderizar tabla de jugadores
        function renderPlayersTable(players) {
            const tableBody = document.getElementById('playersTableBody');
            tableBody.innerHTML = '';
            // Si no hay jugadores, mostrar mensaje
            if (players.length === 0) {
                showNoPlayersMessage();
                return;
            }
            // Renderizar jugadores
            players.forEach(player => {
                const row = createPlayerRow(player);
                tableBody.appendChild(row);
            });
            // Mostrar tabla
            showLoader(false);
        }
        // Crear fila de jugador
        function createPlayerRow(player) {
            const row = document.createElement('tr');
            row.className = 'player-row';
            row.dataset.playerId = player.player_id;

            const birthDate = player.birthday;
            // Mostrar estadísticas
            const statsHtml = `
                <span class="badge-stat">DEF: <span class="stat-value">${player.def}</span></span>
                <span class="badge-stat">SPD: <span class="stat-value">${player.spd}</span></span>
                <span class="badge-stat">OFF: <span class="stat-value">${player.off}</span></span>
            `;
            // Botones de acción
            row.innerHTML = `
                <td>${player.player_id}</td>
                <td>${player.name}</td>
                <td>${player.surname}</td>
                <td>${birthDate}</td>
                <td>${player.height}</td>
                <td>${statsHtml}</td>
                <td>
                    <button class="btn btn-sm btn-outline-primary edit-btn" data-player-id="${player.player_id}">
                        <i class="bi bi-pencil-fill"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger ms-1 delete-btn" data-player-id="${player.player_id}">
                        <i class="bi bi-trash-fill"></i>
                    </button>
                </td>
            `;

            // Añade event listeners
            row.querySelector('.edit-btn').addEventListener('click', (e) => {
                e.stopPropagation();
                editPlayer(player.player_id);
            });

            row.querySelector('.delete-btn').addEventListener('click', (e) => {
                e.stopPropagation();
                confirmDeletePlayer(player.player_id);
            });

            row.addEventListener('click', () => editPlayer(player.player_id));

            return row;
        }
        // Filtrar jugadores
        function filterPlayers() {
            const searchTerm = document.getElementById('playerSearch').value.toLowerCase();
            // Si no hay término de búsqueda, mostrar todos los jugadores
            if (!searchTerm) {
                renderPlayersTable(playersData);
                return;
            }
            // Filtrar jugadores por nombre o apellido
            const filtered = playersData.filter(player => 
                player.name.toLowerCase().includes(searchTerm) || 
                player.surname.toLowerCase().includes(searchTerm)
            );
            // Renderizar tabla con jugadores filtrados
            renderPlayersTable(filtered);
        }

        // Función para editar jugador
        function editPlayer(playerId) {
            const player = playersData.find(p => p.player_id == playerId);
            // Si no se encuentra el jugador, mostrar error
            if (!player) {
                showToast('Error', 'Player not found', 'error');
                return;
            }
            // Mostrar modal con los datos del jugador
            document.getElementById('playerModalLabel').textContent = '{{translations.edit_player}}';
            document.getElementById('playerId').value = player.player_id;
            document.getElementById('playerName').value = player.name;
            document.getElementById('playerSurname').value = player.surname;
            document.getElementById('playerBirthday').value = player.birthday.split(' ')[0];
            document.getElementById('playerHeight').value = player.height;
            document.getElementById('statDef').value = player.def;
            document.getElementById('statSpd').value = player.spd;
            document.getElementById('statOff').value = player.off;
            document.getElementById('statPass').value = player.pass;
            document.getElementById('statDrb').value = player.drb;
            document.getElementById('statShoot').value = player.shoot;

            playerModal.show();
        }

        // Función para resetear formulario de jugador
        function resetPlayerForm() {
            playerForm.reset();
            document.getElementById('playerId').value = '';
        }

        // Función para guardar jugador
        function savePlayer() {
            const playerId = document.getElementById('playerId').value;
            const isNewPlayer = !playerId;
            // Datos del jugador
            const playerData = {
                name: document.getElementById('playerName').value,
                surname: document.getElementById('playerSurname').value,
                birthday: document.getElementById('playerBirthday').value,
                height: document.getElementById('playerHeight').value,
                def: parseInt(document.getElementById('statDef').value),
                spd: parseInt(document.getElementById('statSpd').value),
                off: parseInt(document.getElementById('statOff').value),
                pass: parseInt(document.getElementById('statPass').value),
                drb: parseInt(document.getElementById('statDrb').value),
                shoot: parseInt(document.getElementById('statShoot').value)
            };
            // Validar datos
            if (!playerData.name || !playerData.surname || !playerData.birthday) {
                showToast('Error', 'Please fill all required fields', 'error');
                return;
            }

            const url = isNewPlayer ? '/api/admin/players' : `/api/admin/players/${playerId}`;
            const method = isNewPlayer ? 'POST' : 'PUT';

            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(playerData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showToast('Success', isNewPlayer ? 'Player added successfully' : 'Player updated successfully');
                    playerModal.hide();
                    loadPlayers();
                } else {
                    showToast('Error', data.message || 'Failed to save player', 'error');
                }
            })
            .catch(error => {
                console.error('Error saving player:', error);
                showToast('Error', 'Failed to connect to the server', 'error');
            });
        }

        function confirmDeletePlayer(playerId) {
            const player = playersData.find(p => p.player_id == playerId);

            if (!player) {
                showToast('Error', 'Player not found', 'error');
                return;
            }

            document.getElementById('deletePlayerName').textContent = `${player.name} ${player.surname}`;
            document.getElementById('deletePlayerId').value = player.player_id;

            deleteModal.show();
        }

        // Función para eliminar jugador
        function deletePlayer() {
            const playerId = document.getElementById('deletePlayerId').value;

            if (!playerId) {
                showToast('Error', 'Player ID not found', 'error');
                return;
            }

            fetch(`/api/admin/players/${playerId}`, {
                method: 'DELETE',
                headers: { 'Authorization': `Bearer ${token}` }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showToast('Success', 'Player deleted successfully');
                    deleteModal.hide();
                    loadPlayers();
                } else {
                    showToast('Error', data.message || 'Failed to delete player', 'error');
                }
            })
            .catch(error => {
                console.error('Error deleting player:', error);
                showToast('Error', 'Failed to connect to the server', 'error');
            });
        }

        function showToast(title, message, type = 'info') {
            const toastEl = document.getElementById('alertToast');
            const titleEl = document.getElementById('toastTitle');
            const messageEl = document.getElementById('toastMessage');

            titleEl.textContent = title;
            messageEl.textContent = message;

            toastEl.className = 'toast';
            toastEl.classList.add(
                type === 'error' ? 'bg-danger' : 
                type === 'success' ? 'bg-success' : 'bg-info', 
                'text-white'
            );

            alertToast.show();
        }
    });
</script>
{% endblock %}