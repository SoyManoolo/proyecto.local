{% extends "layout.twig" %}

{% block content %}
    <header>
        <nav class="navbar navbar-dark" style="background-color: #1a1a2e; box-shadow: 0 4px 12px rgba(0, 0, 245, 0.15); position: relative;">
            <div class="container">
                <a class="navbar-brand" href="/home">
                    <img src="assets/img/BlueLock_logo.svg" alt="Blue Lock Logo" class="img-fluid" style="max-width: 180px;">
                </a>
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" 
                           data-bs-toggle="dropdown" aria-expanded="false">
                           <i class="bi bi-list fs-4"></i>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown" 
                            style="background-color: #1a1a2e; border-color: #3535A0; box-shadow: 0 5px 15px rgba(0, 0, 245, 0.2); position: absolute; top: 100%; right: 0;">
                            <li><a class="dropdown-item text-white" href="/profile">Perfil</a></li>
                            <li><a class="dropdown-item text-white" href="/admin">
                                <i class="bi bi-gear-fill me-2"></i> {{ translations.admin_panel }}
                            </a></li>
                            <li><hr class="dropdown-divider" style="border-color: #3535A0;"></li>
                            <li><a class="dropdown-item text-white logout-btn" href="#" data-bs-toggle="modal" data-bs-target="#logoutModal">
                                <i class="bi bi-box-arrow-right me-2"></i> {{ translations.logout }}
                            </a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </nav>
    </header>

    <div class="container py-5">
        <div class="header-section">
            <h1 class="text-white fw-bold"><span style="border-bottom: 4px solid #0000F5; padding-bottom: 5px;">{{ translations.bluelock_players }}</span></h1>
            <div class="input-group search-bar" style="max-width: 300px;">
                <input type="text" id="searchInput" class="form-control search-input" placeholder="{{ translations.search_player }}" 
                       style="background-color: #121225; color: white; border: 2px solid #3535A0; border-radius: 8px 0 0 8px;">
                <button class="btn" type="button" id="searchButton" style="background-color: #0000F5; color: white; border: none; border-radius: 0 8px 8px 0;">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>

        <div id="loadingSpinner" class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">{{ translations.loading }}</span>
            </div>
            <p class="text-white mt-3">{{ translations.loading_players }}</p>
        </div>

        <div id="playersContainer" class="row g-4" style="display: none;">
            <!-- Players will be loaded here via JavaScript -->
        </div>

        <div id="noPlayersMessage" class="alert alert-info text-center" style="display: none; background-color: rgba(26, 26, 46, 0.8); color: white; border: 2px solid #3535A0;">
            {{ translations.no_players_found }}
        </div>
    </div>

    <!-- Logout Confirmation Modal -->
    <div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="background-color: rgba(26, 26, 46, 0.95); border: 2px solid #3535A0; border-radius: 12px;">
                <div class="modal-header border-0" style="background-color: rgba(0, 0, 245, 0.2);">
                    <h1 class="modal-title text-white fw-bold" id="logoutModalLabel">{{ translations.logout }}</h1>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p class="text-white">{{ translations.logout_confirmation }}</p>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn" data-bs-dismiss="modal" style="background-color: transparent; color: white; border: 2px solid #3535A0; border-radius: 8px; font-weight: 600; transition: all 0.3s;">
                        {{ translations.cancel }}
                    </button>
                    <button type="button" id="confirmLogout" class="btn" style="background-color: #0000F5; color: white; border: none; border-radius: 8px; font-weight: 600; transition: all 0.3s;">
                        {{ translations.logout }}
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Player Modal Template -->
    <div class="modal fade" id="playerModal" tabindex="-1" aria-labelledby="playerModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content" style="background-color: rgba(26, 26, 46, 0.95); border: 2px solid #3535A0; border-radius: 12px;">
                <div class="modal-header border-0" style="background-color: rgba(0, 0, 245, 0.2);">
                    <h5 class="modal-title text-white fw-bold" id="playerModalLabel"></h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4 text-center">
                            <img id="modalPlayerImage" src="" alt="" class="img-fluid rounded-circle mb-3" 
                                 style="width: 180px; height: 180px; object-fit: cover; border: 3px solid #3535A0; box-shadow: 0 5px 15px rgba(53, 53, 160, 0.3);">
                            <div class="mt-3">
                                <p class="text-white mb-1"><i class="bi bi-calendar-event me-2"></i> <span id="modalPlayerBirthday"></span></p>
                                <p class="text-white"><i class="bi bi-rulers me-2"></i> <span id="modalPlayerHeight"></span></p>
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="mb-4">
                                <h6 class="text-white mb-3">{{ translations.stats }}</h6>
                                <canvas id="statsChart" width="400" height="250"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <a id="fullProfileLink" href="" class="btn w-100" 
                       style="background-color: #0000F5; color: white; border: none; border-radius: 8px; font-weight: 600;">
                        <i class="bi bi-arrow-right me-2"></i>{{ translations.full_profile }}
                    </a>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block scripts %}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Obtener referencias a elementos del DOM que se usarán frecuentemente
            const playersContainer = document.getElementById('playersContainer');
            const loadingSpinner = document.getElementById('loadingSpinner');
            const noPlayersMessage = document.getElementById('noPlayersMessage');
            const searchInput = document.getElementById('searchInput');
            const searchButton = document.getElementById('searchButton');

            // Array para almacenar todos los jugadores cargados desde la API
            let allPlayers = [];
            // Variable para almacenar el gráfico de estadísticas del jugador
            let statsChart = null;

            // Crear una instancia del modal de cierre de sesión para su uso posterior
            const logoutModal = new bootstrap.Modal(document.getElementById('logoutModal'));

            // Iniciar la carga de jugadores desde la API al cargar la página
            fetchPlayers();

            // Configuración de la funcionalidad de búsqueda
            // Evento de clic en el botón de búsqueda
            searchButton.addEventListener('click', filterPlayers);
            // Evento para buscar al presionar Enter en el campo de búsqueda
            searchInput.addEventListener('keyup', function(event) {
                if (event.key === 'Enter') {
                    filterPlayers();
                }
            });

            // Configuración de los botones de cierre de sesión
            // Asignar evento a todos los botones con clase logout-btn
            document.querySelectorAll('.logout-btn').forEach(button => {
                button.addEventListener('click', function(event) {
                    event.preventDefault();
                    console.log('Mostrando modal de logout');
                    logoutModal.show();
                });
            });

            // Manejar la acción de confirmar el cierre de sesión
            document.getElementById('confirmLogout')?.addEventListener('click', function() {
                // Eliminar datos de autenticación del almacenamiento local
                localStorage.removeItem('token');
                localStorage.removeItem('user');
                // Redirigir al usuario a la página de inicio de sesión
                window.location.href = '/login';
            });

            // Registrar en consola cuando el modal se cierra correctamente
            document.getElementById('logoutModal').addEventListener('hidden.bs.modal', function () {
                console.log('Modal de logout cerrado correctamente');
            });

            // Función para obtener los jugadores desde la API
            // Muestra un spinner mientras carga y maneja errores
            function fetchPlayers() {
                // Mostrar el spinner de carga y ocultar otros elementos
                loadingSpinner.style.display = 'block';
                playersContainer.style.display = 'none';
                noPlayersMessage.style.display = 'none';

                // Realizar la petición a la API
                fetch('/api/players')
                    .then(response => {
                        // Verificar si la respuesta es correcta
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Si los datos se obtuvieron correctamente
                        if (data.status === 'success' && data.data) {
                            // Almacenar los jugadores y renderizarlos
                            allPlayers = data.data;
                            renderPlayers(allPlayers);
                        } else {
                            // Manejar errores en los datos recibidos
                            console.error('Error fetching players:', data.message || 'Unknown error');
                            noPlayersMessage.textContent = 'Error loading players. Please try again later.';
                            noPlayersMessage.style.display = 'block';
                        }
                        // Ocultar el spinner de carga cuando termine
                        loadingSpinner.style.display = 'none';
                    })
                    .catch(error => {
                        // Manejar errores de la petición
                        console.error('Error fetching players:', error);
                        noPlayersMessage.textContent = 'Error loading players. Please try again later.';
                        noPlayersMessage.style.display = 'block';
                        loadingSpinner.style.display = 'none';
                    });
            }

            // Función para filtrar jugadores según el texto introducido en la búsqueda
            function filterPlayers() {
                // Obtener y normalizar el término de búsqueda
                const searchTerm = searchInput.value.toLowerCase().trim();

                // Si el campo está vacío, mostrar todos los jugadores
                if (searchTerm === '') {
                    renderPlayers(allPlayers);
                    return;
                }

                // Filtrar los jugadores que coincidan con el término de búsqueda
                const filteredPlayers = allPlayers.filter(player => {
                    const fullName = `${player.name} ${player.surname}`.toLowerCase();
                    return fullName.includes(searchTerm);
                });

                // Renderizar los jugadores filtrados
                renderPlayers(filteredPlayers);
            }

            // Función para mostrar los jugadores en la interfaz
            function renderPlayers(players) {
                // Limpiar el contenedor de jugadores
                playersContainer.innerHTML = '';

                // Comprobar si hay jugadores para mostrar
                if (players.length === 0) {
                    // Mostrar mensaje de "no se encontraron jugadores"
                    noPlayersMessage.style.display = 'block';
                    playersContainer.style.display = 'none';
                    return;
                }

                // Ocultar mensaje y mostrar el contenedor de jugadores
                noPlayersMessage.style.display = 'none';
                playersContainer.style.display = 'flex';

                // Crear y añadir las tarjetas de cada jugador
                players.forEach(player => {
                    const playerCard = createPlayerCard(player);
                    playersContainer.appendChild(playerCard);
                });

                // Inicializar los eventos para los botones de ver detalles
                document.querySelectorAll('.view-details-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        // Obtener el ID del jugador desde el atributo data
                        const playerId = this.getAttribute('data-player-id');
                        // Mostrar el modal con los detalles de ese jugador
                        showPlayerModal(playerId);
                    });
                });
            }


            // Función para crear una tarjeta HTML para un jugador
            function createPlayerCard(player) {
                // Crear el elemento contenedor
                const col = document.createElement('div');
                col.className = 'col-xl-3 col-lg-4 col-md-6 mb-4';

                // Generar el HTML para la tarjeta con los datos del jugador
                col.innerHTML = `
                    <div class="card h-100 shadow-lg" style="background-color: rgba(26, 26, 46, 0.8); border: 2px solid #3535A0; 
                                          border-radius: 12px; overflow: hidden; transition: transform 0.3s ease, box-shadow 0.3s ease;">
                        <div class="position-relative">
                            <img src="${'assets/img/' + player.player_id + '.jpg'}" alt="${player.name} ${player.surname}"
                                class="card-img-top" style="height: 220px; object-fit: cover;">
                            <div class="position-absolute bottom-0 start-0 w-100 bg-dark bg-opacity-75 text-white py-2 px-3">
                                <span class="fw-bold">${player.name} ${player.surname}</span>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between mb-3">
                                <div>
                                    <small class="text-light"><i class="bi bi-calendar-event me-2"></i> ${player.birthday}</small>
                                </div>
                                <div>
                                    <small class="text-light"><i class="bi bi-rulers me-2"></i> ${player.height}</small>
                                </div>
                            </div>
                            <div class="mt-3">
                                <div class="d-flex justify-content-between mb-1">
                                    <span class="text-light small">{{ translations.defense }}</span>
                                    <span class="text-white fw-bold">${player.def}</span>
                                </div>
                                <div class="progress mb-2" style="height: 6px; background-color: rgba(255, 255, 255, 0.1);">
                                    <div class="progress-bar" role="progressbar" style="width: ${player.def * 10}%; background-color: #3535A0;" 
                                        aria-valuenow="${player.def}" aria-valuemin="0" aria-valuemax="10"></div>
                                </div>

                                <div class="d-flex justify-content-between mb-1">
                                    <span class="text-light small">{{ translations.speed }}</span>
                                    <span class="text-white fw-bold">${player.spd}</span>
                                </div>
                                <div class="progress mb-2" style="height: 6px; background-color: rgba(255, 255, 255, 0.1);">
                                    <div class="progress-bar" role="progressbar" style="width: ${player.spd * 10}%; background-color: #3535A0;" 
                                        aria-valuenow="${player.spd}" aria-valuemin="0" aria-valuemax="10"></div> del jugador en el modal
                                </div>

                                <div class="d-flex justify-content-between mb-1">
                                    <span class="text-light small">{{ translations.offense }}</span>
                                    <span class="text-white fw-bold">${player.off}</span>
                                </div>
                                <div class="progress" style="height: 6px; background-color: rgba(255, 255, 255, 0.1);">
                                    <div class="progress-bar" role="progressbar" style="width: ${player.off * 10}%; background-color: #3535A0;"  de radar con los datos del jugador
                                        aria-valuenow="${player.off}" aria-valuemin="0" aria-valuemax="10"></div>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer border-0 p-3" style="background-color: rgba(26, 26, 46, 1);">
                            <div class="d-grid gap-2">
                                <button class="btn view-details-btn" data-player-id="${player.player_id}"
                                        style="background-color: #0000F5; color: white; border: none; border-radius: 8px; font-weight: 600; transition: all 0.3s;">
                                    <i class="bi bi-eye-fill me-2"></i>{{ translations.view_details }}
                                </button>
                                <a href="/player/${player.player_id}" class="btn" 
                                   style="background-color: transparent; color: white; border: 2px solid #3535A0; border-radius: 8px; font-weight: 600; transition: all 0.3s;">
                                    <i class="bi bi-arrow-right me-2"></i>{{ translations.full_profile }}
                                </a>
                            </div>
                        </div>
                    </div>
                `;

                return col;
            }

            // Función para mostrar el modal con los detalles de un jugador
            function showPlayerModal(playerId) {
                // Buscar el jugador en el array de jugadores cargados
                const player = allPlayers.find(p => p.player_id == playerId);

                // Verificar si el jugador existe
                if (!player) {
                    console.error('Player not found:', playerId);
                    return;
                }

                // Configurar el contenido del modal con los datos del jugador
                document.getElementById('playerModalLabel').textContent = `${player.name} ${player.surname}`;
                document.getElementById('modalPlayerImage').src = `assets/img/${player.player_id}.jpg`;
                document.getElementById('modalPlayerImage').alt = `${player.name} ${player.surname}`;
                document.getElementById('modalPlayerBirthday').textContent = player.birthday;
                document.getElementById('modalPlayerHeight').textContent = player.height;
                document.getElementById('fullProfileLink').href = `/player/${player.player_id}`;

                // Preparar el contexto del canvas para el gráfico de estadísticas
                const ctx = document.getElementById('statsChart').getContext('2d');

                // Destruir el gráfico anterior si existe para evitar superposiciones
                if (statsChart) {
                    statsChart.destroy();
                }

                // Crear nuevo gráfico de radar con las estadísticas del jugador
                statsChart = new Chart(ctx, {
                    type: 'radar',
                    data: {
                        labels: [
                            '{{ translations.defense }}', 
                            '{{ translations.speed }}', 
                            '{{ translations.offense }}', 
                            '{{ translations.passing }}', 
                            '{{ translations.dribbling }}', 
                            '{{ translations.shooting }}'
                        ],
                        datasets: [{
                            label: `${player.name} ${player.surname}`,
                            data: [player.def, player.spd, player.off, player.pass, player.drb, player.shoot],
                            fill: true,
                            backgroundColor: 'rgba(0, 0, 245, 0.2)',
                            borderColor: '#0000F5',
                            pointBackgroundColor: '#0000F5',
                            pointBorderColor: '#fff',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: '#0000F5'
                        }]
                    },
                    options: {
                        // Configuración de las escalas del gráfico
                        scales: {
                            r: {
                                // Personalización del aspecto visual del radar
                                angleLines: {
                                    color: 'rgba(255, 255, 255, 0.2)'
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.2)'
                                },
                                pointLabels: {
                                    color: 'white'
                                },
                                ticks: {
                                    backdropColor: 'transparent',
                                    color: 'rgba(255, 255, 255, 0.7)',
                                    z: 1
                                },
                                // Configurar valores mínimos y máximos para la escala
                                suggestedMin: 0,
                                suggestedMax: 10
                            }
                        },
                        // Configuración de plugins del gráfico
                        plugins: {
                            legend: {
                                display: false // Ocultar la leyenda
                            }
                        }
                    }
                });

                // Mostrar el modal con los datos del jugador
                const playerModal = new bootstrap.Modal(document.getElementById('playerModal'));
                playerModal.show();
            }
        });
    </script>
{% endblock %}

{% block styles %}
<style>
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 245, 0.2) !important;
    }

    .view-details-btn:hover {
        background-color: #0000c5 !important;
    }

    .search-input:focus {
        box-shadow: 0 0 0 0.25rem rgba(0, 0, 245, 0.25);
        border-color: #0000F5;
    }

    /* Estilo por defecto para escritorio */
    .header-section {
        display: flex;
        justify-content: space-between; /* Alinea título a la izquierda y barra de búsqueda a la derecha */
        align-items: center; /* Centra verticalmente */
        padding: 10px 0;
    }

    /* Media query para pantallas móviles (menor a 768px) */
    @media (max-width: 767.98px) {
        .header-section {
            flex-direction: column; /* Apila los elementos verticalmente */
            align-items: center; /* Centra horizontalmente */
        }
        .search-bar {
            margin-top: 30px; /* Espacio entre título y barra de búsqueda */
            width: 90%; /* Ancho relativo para mejor ajuste en móviles */
            max-width: 300px; /* Mantiene el límite máximo */
        }
        h1 {
            margin-bottom: 0; /* Elimina margen inferior del título */
        }
    }
</style>
{% endblock %}