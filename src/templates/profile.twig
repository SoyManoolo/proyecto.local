{% extends "layout.twig" %}

{% block content %}
    <header>
        <nav class="navbar navbar-expand-lg navbar-dark" style="background-color: #1a1a2e; box-shadow: 0 4px 12px rgba(0, 0, 245, 0.15);">
            <div class="container">
                <a class="navbar-brand" href="/home">
                    <img src="assets/img/BlueLock_logo.svg" alt="Blue Lock Logo" class="img-fluid" style="max-width: 180px;">
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" 
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" 
                               data-bs-toggle="dropdown" aria-expanded="false">
                               <i class="bi bi-list fs-4"></i>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown" 
                                style="background-color: #1a1a2e; border-color: #3535A0; box-shadow: 0 5px 15px rgba(0, 0, 245, 0.2);">
                                <li><a class="dropdown-item text-white" href="/home">{{ translations.home }}</a></li>
                                <li><a class="dropdown-item text-white active" href="/profile">{{ translations.profile }}</a></li>
                                <li><hr class="dropdown-divider" style="border-color: #3535A0;"></li>
                                <li><a class="dropdown-item text-white logout-btn" href="#"><i class="bi bi-box-arrow-right me-2"></i>{{ translations.logout }}</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card" style="background-color: rgba(26, 26, 46, 0.8); border: 2px solid #3535A0; border-radius: 12px;">
                    <div class="card-header" style="background-color: rgba(0, 0, 245, 0.2); border-bottom: 2px solid #3535A0;">
                        <h2 class="text-white text-center mb-0">{{ translations.profile }}</h2>
                    </div>
                    <div class="card-body p-4">
                        <div id="profileAlert" class="alert d-none mb-4" role="alert"></div>

                        <form id="profileForm">
                            <div class="row mb-3">
                                <div class="col-md-6 mb-3 mb-md-0">
                                    <label for="username" class="form-label text-white">{{ translations.username }}</label>
                                    <input type="text" class="form-control" id="username" name="username" 
                                           style="background-color: #121225; color: white; border: 2px solid #3535A0; border-radius: 8px;" readonly>
                                    <small class="form-text text-muted">{{ translations.username_cannot_change }}</small>
                                </div>
                                <div class="col-md-6">
                                    <label for="email" class="form-label text-white">{{ translations.email }}</label>
                                    <input type="email" class="form-control" id="email" name="email" 
                                           style="background-color: #121225; color: white; border: 2px solid #3535A0; border-radius: 8px;" readonly>
                                    <small class="form-text text-muted">{{ translations.email_cannot_change }}</small>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6 mb-3 mb-md-0">
                                    <label for="name" class="form-label text-white">{{ translations.name }}</label>
                                    <input type="text" class="form-control" id="name" name="name" required
                                           style="background-color: #121225; color: white; border: 2px solid #3535A0; border-radius: 8px;">
                                </div>
                                <div class="col-md-6">
                                    <label for="surname" class="form-label text-white">{{ translations.surname }}</label>
                                    <input type="text" class="form-control" id="surname" name="surname" required
                                           style="background-color: #121225; color: white; border: 2px solid #3535A0; border-radius: 8px;">
                                </div>
                            </div>

                            <hr style="border-color: #3535A0; opacity: 0.5;" class="my-4">

                            <h5 class="text-white mb-3">{{ translations.change_password }}</h5>
                            <div class="mb-3">
                                <label for="currentPassword" class="form-label text-white">{{ translations.current_password }}</label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="currentPassword" name="currentPassword"
                                           style="background-color: #121225; color: white; border: 2px solid #3535A0; border-radius: 8px 0 0 8px;">
                                    <button class="btn toggle-password" type="button" data-target="currentPassword"
                                            style="background-color: #3535A0; color: white; border: none; border-radius: 0 8px 8px 0;">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="newPassword" class="form-label text-white">{{ translations.new_password }}</label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="newPassword" name="newPassword"
                                           style="background-color: #121225; color: white; border: 2px solid #3535A0; border-radius: 8px 0 0 8px;">
                                    <button class="btn toggle-password" type="button" data-target="newPassword"
                                            style="background-color: #3535A0; color: white; border: none; border-radius: 0 8px 8px 0;">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label for="confirmPassword" class="form-label text-white">{{ translations.confirm_password }}</label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="confirmPassword" name="confirmPassword"
                                           style="background-color: #121225; color: white; border: 2px solid #3535A0; border-radius: 8px 0 0 8px;">
                                    <button class="btn toggle-password" type="button" data-target="confirmPassword"
                                            style="background-color: #3535A0; color: white; border: none; border-radius: 0 8px 8px 0;">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <small class="form-text text-muted">{{ translations.leave_blank_no_change }}</small>
                            </div>

                            <div class="d-grid">
                                <button type="submit" class="btn btn-lg" id="saveProfileBtn"
                                        style="background-color: #0000F5; color: white; border: none; border-radius: 8px; font-weight: 600;">
                                    <i class="bi bi-save me-2"></i>{{ translations.save_changes }}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Logout Confirmation Modal -->
    <div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="background-color: rgba(26, 26, 46, 0.95); border: 2px solid #3535A0; border-radius: 12px;">
                <div class="modal-header border-0" style="background-color: rgba(0, 0, 245, 0.2);">
                    <h5 class="modal-title text-white fw-bold" id="logoutModalLabel">{{ translations.logout }}</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p class="text-white">{{ translations.logout_confirmation }}</p>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn" data-bs-dismiss="modal" style="background-color: transparent; color: white; border: 2px solid #3535A0; border-radius: 8px; font-weight: 600; transition: all 0.3s;">
                        {{ translations.cancel }}
                    </button>
                    <button type="button" id="confirmLogout" class="btn" style="background-color: #0000F5; color: white; border: none; border-radius: 8px; font-weight: 600; transition: all 0.3s;">
                        {{ translations.logout }}
                    </button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block scripts %}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Obtener elementos del DOM
            const profileForm = document.getElementById('profileForm');
            const profileAlert = document.getElementById('profileAlert');
            const saveProfileBtn = document.getElementById('saveProfileBtn');
            const logoutBtn = document.querySelector('.logout-btn');
            const confirmLogoutBtn = document.getElementById('confirmLogout');
            
            // Salir si los elementos esenciales no existen
            if (!profileForm || !profileAlert || !saveProfileBtn) return;

            // Configurar botones de alternar visibilidad de contraseña
            document.querySelectorAll('.toggle-password').forEach(btn => {
                btn.addEventListener('click', function() {
                    const passwordInput = document.getElementById(this.getAttribute('data-target'));
                    const icon = this.querySelector('i');
                    if (passwordInput.type === 'password') {
                        passwordInput.type = 'text';
                        icon.classList.replace('bi-eye', 'bi-eye-slash');
                    } else {
                        passwordInput.type = 'password';
                        icon.classList.replace('bi-eye-slash', 'bi-eye');
                    }
                });
            });

            // Inicialización
            loadUserProfile();
            profileForm.addEventListener('submit', e => { e.preventDefault(); updateProfile(); });
            if (logoutBtn) logoutBtn.addEventListener('click', e => {
                e.preventDefault();
                new bootstrap.Modal(document.getElementById('logoutModal')).show();
            });
            if (confirmLogoutBtn) confirmLogoutBtn.addEventListener('click', logout);

            // Cargar perfil del usuario
            function loadUserProfile() {
                const token = localStorage.getItem('token');
                
                if (!token) {
                    showAlert('error', '{{ translations.login_required|default("Please log in to view your profile") }}');
                    // Deshabilitar formulario y mostrar botón de inicio de sesión
                    Array.from(profileForm.elements).forEach(el => el.disabled = true);
                    const loginButton = document.createElement('a');
                    loginButton.href = '/login';
                    loginButton.className = 'btn btn-lg mt-3';
                    loginButton.style = 'background-color: #0000F5; color: white; border: none; border-radius: 8px; font-weight: 600;';
                    loginButton.innerHTML = '<i class="bi bi-box-arrow-in-right me-2"></i>{{ translations.login|default("Log In") }}';
                    saveProfileBtn.parentNode.appendChild(loginButton);
                    saveProfileBtn.style.display = 'none';
                    return;
                }

                try {
                    const userString = localStorage.getItem('user');
                    if (!userString) {
                        window.location.href = '/login';
                        return;
                    }

                    const userData = JSON.parse(userString);
                    if (!userData) {
                        window.location.href = '/login';
                        return;
                    }

                    // Rellenar campos con datos del usuario
                    document.getElementById('username').value = userData.username || '';
                    document.getElementById('email').value = userData.email || '';
                    document.getElementById('name').value = userData.name || '';
                    document.getElementById('surname').value = userData.surname || '';

                    // Omitir llamada a la API si los datos ya están en localStorage
                    if (userData.name && userData.surname) return;

                    // Obtener datos adicionales de la API
                    fetch('/api/user/profile', {
                        method: 'GET',
                        headers: {
                            'Authorization': 'Bearer ' + token,
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.ok ? response.json() : Promise.reject('Network error'))
                    .then(data => {
                        if (data.status === 'success' && data.data) {
                            if (!userData.name) document.getElementById('name').value = data.data.name || '';
                            if (!userData.surname) document.getElementById('surname').value = data.data.surname || '';

                            // Actualizar localStorage
                            localStorage.setItem('user', JSON.stringify({
                                id: userData.id,
                                username: userData.username,
                                email: userData.email,
                                name: data.data.name || userData.name || '',
                                surname: data.data.surname || userData.surname || ''
                            }));
                        } else {
                            showAlert('error', data.message || 'Error loading profile data');
                        }
                    })
                    .catch(error => showAlert('error', 'Error loading profile data. Please try again later.'));
                } catch (error) {
                    showAlert('error', 'Error processing user data: ' + error.message);
                }
            }

            // Actualizar perfil
            function updateProfile() {
                const token = localStorage.getItem('token');
                if (!token) {
                    window.location.href = '/login';
                    return;
                }

                // Obtener datos del formulario
                const name = document.getElementById('name').value;
                const surname = document.getElementById('surname').value;
                const currentPassword = document.getElementById('currentPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                // Validar datos
                if (!name || !surname) {
                    showAlert('error', 'Name and surname are required');
                    return;
                }

                // Verificar campos de contraseña
                if (newPassword || confirmPassword) {
                    if (!currentPassword) {
                        showAlert('error', 'Current password required to change password');
                        return;
                    }
                    if (newPassword !== confirmPassword) {
                        showAlert('error', 'New password and confirmation do not match');
                        return;
                    }
                }

                // Preparar datos para la API
                const userData = { name, surname };
                if (currentPassword && newPassword) {
                    userData.currentPassword = currentPassword;
                    userData.newPassword = newPassword;
                }

                // Deshabilitar botón de guardar y mostrar estado de carga
                saveProfileBtn.disabled = true;
                saveProfileBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Saving...';

                // Enviar solicitud de actualización
                fetch('/api/user/update', {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + token,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(userData)
                })
                .then(response => response.ok ? response.json() : Promise.reject('Network error'))
                .then(data => {
                    if (data.status === 'success') {
                        showAlert('success', data.message || 'Profile updated successfully');
                        // Limpiar campos de contraseña
                        document.getElementById('currentPassword').value = '';
                        document.getElementById('newPassword').value = '';
                        document.getElementById('confirmPassword').value = '';

                        // Actualizar localStorage
                        const storedUser = JSON.parse(localStorage.getItem('user') || '{}');
                        localStorage.setItem('user', JSON.stringify({
                            ...storedUser,
                            name: document.getElementById('name').value,
                            surname: document.getElementById('surname').value
                        }));
                    } else {
                        showAlert('error', data.message || 'Error updating profile');
                    }
                })
                .catch(error => showAlert('error', 'Error updating profile. Please try again later.'))
                .finally(() => {
                    saveProfileBtn.disabled = false;
                    saveProfileBtn.innerHTML = '<i class="bi bi-save me-2"></i>{{ translations.save_changes }}';
                });
            }

            // Función de cierre de sesión
            function logout() {
                localStorage.removeItem('token');
                localStorage.removeItem('user');
                sessionStorage.clear();
                window.location.href = '/login';
            }

            // Mostrar alerta
            function showAlert(type, message) {
                profileAlert.classList.remove('d-none', 'alert-success', 'alert-danger');
                profileAlert.classList.add(type === 'success' ? 'alert-success' : 'alert-danger');
                profileAlert.textContent = message;
                profileAlert.scrollIntoView({ behavior: 'smooth', block: 'start' });
                setTimeout(() => profileAlert.classList.add('d-none'), 5000);
            }
        });
    </script>
{% endblock %}

{% block styles %}
    <style>
        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(0, 0, 245, 0.25);
            border-color: #3535A0;
        }

        .btn:hover {
            opacity: 0.9;
        }

        .toggle-password:focus {
            box-shadow: none;
        }

        /* Alert animations */
        .alert {
            transition: all 0.3s ease-in-out;
        }

        .alert.d-none {
            opacity: 0;
        }
    </style>
{% endblock %}
